package com.example.kotlindemogithubproject.dao

import android.database.Cursor
import android.database.sqlite.SQLiteStatement
import org.greenrobot.greendao.AbstractDao
import org.greenrobot.greendao.Property
import org.greenrobot.greendao.database.Database
import org.greenrobot.greendao.database.DatabaseStatement
import org.greenrobot.greendao.internal.DaoConfig

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "LOCAL_USER".
 */
class LocalUserDao : AbstractDao<LocalUser, String> {

    /**
     * Properties of entity LocalUser.<br></br>
     * Can be used for QueryBuilder and for referencing column names.
     */
    object Properties {
        val Login = Property(0, String::class.java, "login", true, "LOGIN")
        val Name = Property(1, String::class.java, "name", false, "NAME")
        val AvatarUrl = Property(2, String::class.java, "avatarUrl", false, "AVATAR_URL")
        val Followers = Property(3, Int::class.java, "followers", false, "FOLLOWERS")
        val Following = Property(4, Int::class.java, "following", false, "FOLLOWING")
    }


    constructor(config: DaoConfig) : super(config) {}

    constructor(config: DaoConfig, daoSession: DaoSession) : super(config, daoSession) {}

    override fun bindValues(stmt: DatabaseStatement, entity: LocalUser) {
        stmt.clearBindings()
        stmt.bindString(1, entity.login)

        val name = entity.name
        if (name != null) {
            stmt.bindString(2, name)
        }

        val avatarUrl = entity.avatarUrl
        if (avatarUrl != null) {
            stmt.bindString(3, avatarUrl)
        }

        val followers = entity.followers
        if (followers != null) {
            stmt.bindLong(4, followers.toLong())
        }

        val following = entity.following
        if (following != null) {
            stmt.bindLong(5, following.toLong())
        }
    }

    override fun bindValues(stmt: SQLiteStatement, entity: LocalUser) {
        stmt.clearBindings()
        stmt.bindString(1, entity.login)

        val name = entity.name
        if (name != null) {
            stmt.bindString(2, name)
        }

        val avatarUrl = entity.avatarUrl
        if (avatarUrl != null) {
            stmt.bindString(3, avatarUrl)
        }

        val followers = entity.followers
        if (followers != null) {
            stmt.bindLong(4, followers.toLong())
        }

        val following = entity.following
        if (following != null) {
            stmt.bindLong(5, following.toLong())
        }
    }

    public override fun readKey(cursor: Cursor, offset: Int): String {
        return cursor.getString(offset + 0)
    }

    public override fun readEntity(cursor: Cursor, offset: Int): LocalUser {
        return LocalUser( //
            cursor.getString(offset + 0), // login
            if (cursor.isNull(offset + 1)) null else cursor.getString(offset + 1), // name
            if (cursor.isNull(offset + 2)) null else cursor.getString(offset + 2), // avatarUrl
            if (cursor.isNull(offset + 3)) null else cursor.getInt(offset + 3), // followers
            if (cursor.isNull(offset + 4)) null else cursor.getInt(offset + 4) // following
        )
    }

    public override fun readEntity(cursor: Cursor, entity: LocalUser, offset: Int) {
        entity.login = cursor.getString(offset + 0)
        entity.name = if (cursor.isNull(offset + 1)) null else cursor.getString(offset + 1)
        entity.avatarUrl = if (cursor.isNull(offset + 2)) null else cursor.getString(offset + 2)
        entity.followers = if (cursor.isNull(offset + 3)) null else cursor.getInt(offset + 3)
        entity.following = if (cursor.isNull(offset + 4)) null else cursor.getInt(offset + 4)
    }

    override fun updateKeyAfterInsert(entity: LocalUser, rowId: Long): String? {
        return entity.login
    }

    public override fun getKey(entity: LocalUser?): String? {
        return entity?.login
    }

    public override fun hasKey(entity: LocalUser): Boolean {
        throw UnsupportedOperationException("Unsupported for entities with a non-null key")
    }

    override fun isEntityUpdateable(): Boolean {
        return true
    }

    companion object {

        val TABLENAME = "LOCAL_USER"

        /** Creates the underlying database table.  */
        fun createTable(db: Database, ifNotExists: Boolean) {
            val constraint = if (ifNotExists) "IF NOT EXISTS " else ""
            db.execSQL(
                "CREATE TABLE " + constraint + "\"LOCAL_USER\" (" + //

                        "\"LOGIN\" TEXT PRIMARY KEY NOT NULL ," + // 0: login

                        "\"NAME\" TEXT," + // 1: name

                        "\"AVATAR_URL\" TEXT," + // 2: avatarUrl

                        "\"FOLLOWERS\" INTEGER," + // 3: followers

                        "\"FOLLOWING\" INTEGER);"
            ) // 4: following
        }

        /** Drops the underlying database table.  */
        fun dropTable(db: Database, ifExists: Boolean) {
            val sql = "DROP TABLE " + (if (ifExists) "IF EXISTS " else "") + "\"LOCAL_USER\""
            db.execSQL(sql)
        }
    }

}
